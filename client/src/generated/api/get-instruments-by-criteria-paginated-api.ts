/* tslint:disable */
/* eslint-disable */
/**
 * Server Error
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { GetInstrumentByCriteriaPageResponse } from "../model";
// @ts-ignore
import type { GetInstrumentCriteriaRequestBody } from "../model";
// @ts-ignore
import type { ServerError } from "../model";
/**
 * GetInstrumentsByCriteriaPaginatedApi - axios parameter creator
 * @export
 */
export const GetInstrumentsByCriteriaPaginatedApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get Instruments by Criteria
     * @param {number} pageSize Page Size
     * @param {number} pageNumber Page Number (1-based enumeration)
     * @param {GetInstrumentCriteriaRequestBody} getInstrumentCriteriaRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstrumentsByCriteriaPaginated: async (
      pageSize: number,
      pageNumber: number,
      getInstrumentCriteriaRequestBody: GetInstrumentCriteriaRequestBody,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists(
        "getInstrumentsByCriteriaPaginated",
        "pageSize",
        pageSize,
      );
      // verify required parameter 'pageNumber' is not null or undefined
      assertParamExists(
        "getInstrumentsByCriteriaPaginated",
        "pageNumber",
        pageNumber,
      );
      // verify required parameter 'getInstrumentCriteriaRequestBody' is not null or undefined
      assertParamExists(
        "getInstrumentsByCriteriaPaginated",
        "getInstrumentCriteriaRequestBody",
        getInstrumentCriteriaRequestBody,
      );
      const localVarPath = `/api/instruments/paginated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageSize !== undefined) {
        localVarQueryParameter["pageSize"] = pageSize;
      }

      if (pageNumber !== undefined) {
        localVarQueryParameter["pageNumber"] = pageNumber;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        getInstrumentCriteriaRequestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GetInstrumentsByCriteriaPaginatedApi - functional programming interface
 * @export
 */
export const GetInstrumentsByCriteriaPaginatedApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    GetInstrumentsByCriteriaPaginatedApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get Instruments by Criteria
     * @param {number} pageSize Page Size
     * @param {number} pageNumber Page Number (1-based enumeration)
     * @param {GetInstrumentCriteriaRequestBody} getInstrumentCriteriaRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInstrumentsByCriteriaPaginated(
      pageSize: number,
      pageNumber: number,
      getInstrumentCriteriaRequestBody: GetInstrumentCriteriaRequestBody,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetInstrumentByCriteriaPageResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getInstrumentsByCriteriaPaginated(
          pageSize,
          pageNumber,
          getInstrumentCriteriaRequestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "GetInstrumentsByCriteriaPaginatedApi.getInstrumentsByCriteriaPaginated"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GetInstrumentsByCriteriaPaginatedApi - factory interface
 * @export
 */
export const GetInstrumentsByCriteriaPaginatedApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GetInstrumentsByCriteriaPaginatedApiFp(configuration);
  return {
    /**
     *
     * @summary Get Instruments by Criteria
     * @param {number} pageSize Page Size
     * @param {number} pageNumber Page Number (1-based enumeration)
     * @param {GetInstrumentCriteriaRequestBody} getInstrumentCriteriaRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstrumentsByCriteriaPaginated(
      pageSize: number,
      pageNumber: number,
      getInstrumentCriteriaRequestBody: GetInstrumentCriteriaRequestBody,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GetInstrumentByCriteriaPageResponse> {
      return localVarFp
        .getInstrumentsByCriteriaPaginated(
          pageSize,
          pageNumber,
          getInstrumentCriteriaRequestBody,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GetInstrumentsByCriteriaPaginatedApi - object-oriented interface
 * @export
 * @class GetInstrumentsByCriteriaPaginatedApi
 * @extends {BaseAPI}
 */
export class GetInstrumentsByCriteriaPaginatedApi extends BaseAPI {
  /**
   *
   * @summary Get Instruments by Criteria
   * @param {number} pageSize Page Size
   * @param {number} pageNumber Page Number (1-based enumeration)
   * @param {GetInstrumentCriteriaRequestBody} getInstrumentCriteriaRequestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetInstrumentsByCriteriaPaginatedApi
   */
  public getInstrumentsByCriteriaPaginated(
    pageSize: number,
    pageNumber: number,
    getInstrumentCriteriaRequestBody: GetInstrumentCriteriaRequestBody,
    options?: RawAxiosRequestConfig,
  ) {
    return GetInstrumentsByCriteriaPaginatedApiFp(this.configuration)
      .getInstrumentsByCriteriaPaginated(
        pageSize,
        pageNumber,
        getInstrumentCriteriaRequestBody,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
